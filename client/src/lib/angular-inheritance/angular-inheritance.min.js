!function(ng){"use strict";function BaseController($scope){this.scope||(this.scope=$scope),this.log||(this.log=ng.injector(["ng"]).get("$log"))}function BaseService(){this.log||(this.log=ng.injector(["ng"]).get("$log"))}var cache,$injector=ng.injector(["ng"]);$injector.invoke(function($cacheFactory){cache=$cacheFactory("angular-inheritance")}),ng.inherit=function(childName,childConstructor){function extend(Child,Parent){Child.prototype=inheritPrototype(Parent.prototype),Child.prototype.constructor=Child,Child.$parent||(Child.$parent=[]),Child.$parent.push(Parent),Parent.$parent&&Child.$parent.concat(Parent.$parent)}function inheritPrototype(proto){function F(){}return F.prototype=proto,new F}function inherit(childConstructor,parentName){var parentConstructor=cache.get(parentName);if(!parentConstructor)throw"The name"+parentName+" does not refer to any constructor. Did you forget to define/include it ?";extend(childConstructor,parentConstructor)}return{from:function(parentName){inherit(childConstructor,parentName),cache.put(childName,childConstructor)}}},ng.expand=function(childName,childConstructor){function extend(Child,Component){for(var property in Component.prototype)Child.prototype[property]=Component.prototype[property];Child.prototype.constructor=Child,Child.$parent||(Child.$parent=[]),Child.$parent.push(Component),Component.$parent&&Child.$parent.concat(Component.$parent)}function inherit(childConstructor,componentNameArray){angular.forEach(componentNameArray,function(componentName){var componentConstructor=cache.get(componentName);if(!componentConstructor)throw"The name "+componentName+" does not refer to any constructor. Did you forget to define/include it ?";extend(childConstructor,componentConstructor)})}return{from:function(componentNameArray){inherit(childConstructor,componentNameArray),cache.put(childName,childConstructor)}}},BaseController.prototype.super=function(componentName,componentDependencies){cache.get(componentName).apply(this,componentDependencies)},BaseController.prototype.parent=function(componentName){var cachedComponent=cache.get(componentName),component=this.constructor.$parent[this.constructor.$parent.indexOf(cachedComponent)];return component.prototype},cache.put("BaseController",BaseController),BaseService.prototype.super=function(componentName,componentDependencies){cache.get(componentName).apply(this,componentDependencies)},BaseService.prototype.parent=function(componentName){return cache.get(componentName).prototype},cache.put("BaseService",BaseService)}(angular);